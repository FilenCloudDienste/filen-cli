name: Build and attach artifacts

on:
  release:
    types: [ published ]

jobs:
  build-and-publish-binaries:
    name: Build binaries (${{ matrix.name }})
    strategy:
      matrix:
        include:
          - name: win-x64
            target: windows-x64 --windows-icon=.github/workflows/filen-icon.ico
            os: windows-11-arm
          - name: win-arm64
            target: windows-arm64 --windows-icon=.github/workflows/filen-icon.ico
            os: windows-11-arm
          - name: linux-x64
            target: linux-x64
            os: ubuntu-latest
          - name: linux-arm64
            target: linux-arm64
            os: ubuntu-24.04-arm
          - name: macos-x64
            target: macos-x64
            os: macos-latest
          - name: macos-arm64
            target: macos-arm64
            os: macos-latest
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install bun
        if: ${{ matrix.os != 'windows-11-arm' }}
        uses: oven-sh/setup-bun@v2
      - name: Install bun (Windows)
        if: ${{ matrix.os == 'windows-11-arm' }}
        run: powershell -c "irm bun.sh/install.ps1|iex"
      - run: bun install
      - run: bun run compile --target=bun-${{ matrix.target }} --define "FILEN_CLI_VERSION=${{ github.event.release.tag_name }}" --outfile dist/filen-cli-${{ github.event.release.tag_name }}-${{ matrix.name }}
      - name: Codesign and notarize on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        env: 
          APPLE_DEVELOPER_ID_CERT: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          APPLE_DEVELOPER_ID_CERT_PASS: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASS }}
          APPLE_NOTARIZE_ID: ${{ secrets.APPLE_NOTARIZE_ID }}
          APPLE_NOTARIZE_PASS: ${{ secrets.APPLE_NOTARIZE_PASS }}
          APPLE_NOTARIZE_TEAM_ID: ${{ secrets.APPLE_NOTARIZE_TEAM_ID }}
        working-directory: ./dist
        run: |
          # import certificate
          echo "$APPLE_DEVELOPER_ID_CERT" | base64 --decode > certificate.p12
          security create-keychain -p actions build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$APPLE_DEVELOPER_ID_CERT_PASS" -T /usr/bin/codesign
          security list-keychains -d user -s ~/Library/Keychains/build.keychain
          security set-keychain-settings -t 3600 -u ~/Library/Keychains/build.keychain
          security unlock-keychain -p actions ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k actions ~/Library/Keychains/build.keychain
          # codesign
          codesign --sign "Developer ID Application: Filen Cloud Dienste UG (haftungsbeschraenkt)" --options runtime --force --deep --keychain ~/Library/Keychains/build.keychain --entitlements=../.github/workflows/entitlements.plist filen-cli-${{ github.event.release.tag_name }}-${{ matrix.name }}
          # notarize
          zip filen-cli-macos.zip filen-cli-${{ github.event.release.tag_name }}-${{ matrix.name }}
          xcrun notarytool submit filen-cli-macos.zip --apple-id $APPLE_NOTARIZE_ID --password $APPLE_NOTARIZE_PASS --team-id $APPLE_NOTARIZE_TEAM_ID --output-format json --wait 2>&1 | tee notarization_info.json
          id=$(cat notarization_info.json | jq -r '.id')
          xcrun notarytool log $id --apple-id $APPLE_NOTARIZE_ID --password $APPLE_NOTARIZE_PASS --team-id $APPLE_NOTARIZE_TEAM_ID
          # cleanup certificate
          security delete-keychain build.keychain
          rm -f certificate.p12
          rm filen-cli-macos.zip
      - name: Execute binary
        if: ${{ matrix.target != 'macos-x64' }}
        run: dist/filen-cli-${{ github.event.release.tag_name }}-${{ matrix.name }} --help
      - name: Attach binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/filen-cli-*

  build-and-publish-npm:
    name: Build and publish to npm
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == false }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Inject version
        uses: richardrigutins/replace-in-files@v2
        with:
          files: "package.json"
          search-text: "\"version\": \"0.0.0\""
          replacement-text: "\"version\": \"${{ github.event.release.tag_name }}\""
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - run: bun install
      - run: bun build --target=node --sourcemap --define VERSION="${{ github.event.release.tag_name }}" --define IS_RUNNING_AS_NPM_PACKAGE=true src/index.ts --outdir build
      - run: bun publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  build-and-publish-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == false }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: filen/cli:latest,filen/cli:${{ github.event.release.tag_name }}
  
  build-html-docs:
    name: Build HTML docs
    runs-on: ubuntu-latest
    #if: ${{ github.event.release.prerelease == false }}
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Inject version
        uses: richardrigutins/replace-in-files@v2
        with:
          files: "package.json"
          search-text: "\"version\": \"0.0.0\""
          replacement-text: "\"version\": \"${{ github.event.release.tag_name }}\""
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - run: bun install
      - name: Setup Node
        uses: actions/setup-node@v4
      - name: Build docs
        run: chmod +x build-docs.sh && ./build-docs.sh && mv filen-cli-docs.html filen-cli-${{ github.event.release.tag_name }}-docs.html
      - name: Attach HTML file to release
        uses: softprops/action-gh-release@v2
        with:
          files: filen-cli-${{ github.event.release.tag_name }}-docs.html
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: filen-cli-docs/dist
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4